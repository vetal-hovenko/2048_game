{"version":3,"sources":["scripts/main.js"],"names":["table","document","querySelector","rows","querySelectorAll","score","numbers","generateBoard","messageStart","buttonStart","classList","textContent","length","forEach","row","cells","Array","from","cell","rowNumbers","map","parseInt","push","startButton","addEventListener","updateBoard","generateRandomTile","WIDTH","isAbleToContinue","gameWinner","messageLoseElement","canSlide","col","remove","emptyCells","i","j","randomIndex","Math","floor","random","claimWin","slideRight","tileGenerated","colIndex","slideLeft","slideDown","rowIndex","slideUp","number","tileClass","className","toString","handleKeyPress","slide","key","touchStartX","touchStartY","swipeThreshold","handleTouchStart","touches","clientX","clientY","handleTouchEnd","touchEndX","changedTouches","touchEndY","deltaX","deltaY","abs","handleTouchMove","preventDefault","passive","window","reload","returnValue"],"mappings":"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","file":"main.c357e024.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('.game-field');\nconst rows = table.querySelectorAll('.field-row');\nlet score = 0;\n\nconst numbers = [];\n\nfunction generateBoard() {\n  score = 0;\n\n  const messageStart = document.querySelector('.message-start');\n  const buttonStart = document.querySelector('.start');\n  const messageLose = document.querySelector('.message-lose');\n\n  messageLose.classList = 'message message-lose hidden';\n  messageStart.classList += ' hidden';\n  buttonStart.textContent = 'Reset';\n\n  numbers.length = 0;\n\n  rows.forEach(row => {\n    const cells = Array.from(row.querySelectorAll('.field-cell'));\n\n    cells.forEach(cell => {\n      cell.textContent = '';\n    });\n\n    const rowNumbers = cells.map(cell => parseInt(cell.textContent) || 0);\n\n    numbers.push(rowNumbers);\n  });\n\n  return numbers;\n}\n\nconst startButton = document.querySelector('.button.start');\n\nstartButton.addEventListener('click', function() {\n  generateBoard();\n  updateBoard();\n  generateRandomTile();\n  generateRandomTile();\n});\n\nconst WIDTH = 4;\n\nfunction isAbleToContinue() {\n  gameWinner();\n\n  const messageLoseElement = document.querySelector('.message-lose');\n\n  let canSlide = false;\n\n  for (let row = 0; row < WIDTH; row++) {\n    for (let col = 0; col < WIDTH; col++) {\n      if (numbers[row][col] === 0) {\n        return;\n      }\n\n      if (\n        (col < WIDTH - 1 && numbers[row][col] === numbers[row][col + 1])\n        || (row < WIDTH - 1 && numbers[row][col] === numbers[row + 1][col])\n      ) {\n        canSlide = true;\n      }\n    }\n  }\n\n  if (!canSlide) {\n    messageLoseElement.classList.remove('hidden');\n  }\n}\n\nfunction generateRandomTile() {\n  const emptyCells = [];\n\n  for (let i = 0; i < WIDTH; i++) {\n    for (let j = 0; j < WIDTH; j++) {\n      if (numbers[i][j] === 0) {\n        emptyCells.push({\n          row: i,\n          col: j,\n        });\n      }\n    }\n  }\n\n  if (emptyCells.length === 0) {\n    return;\n  }\n\n  const randomIndex = Math.floor(Math.random() * emptyCells.length);\n  const { row, col } = emptyCells[randomIndex];\n\n  numbers[row][col] = Math.random() < 0.9 ? 2 : 4;\n  updateBoard();\n}\n\nfunction gameWinner() {\n  const claimWin = document.querySelector('.message-win');\n\n  for (let row = 0; row < WIDTH; row++) {\n    for (let col = 0; col < WIDTH; col++) {\n      if (numbers[row][col] === 2048) {\n        claimWin.classList.remove('hidden');\n      }\n    }\n  }\n}\n\nfunction slideRight() {\n  let tileGenerated = false;\n\n  for (let row = 0; row < WIDTH; row++) {\n    for (let col = WIDTH - 1; col >= 0; col--) {\n      if (numbers[row][col] !== 0) {\n        let colIndex = col;\n\n        while (colIndex < WIDTH - 1 && numbers[row][colIndex + 1] === 0) {\n          numbers[row][colIndex + 1] = numbers[row][colIndex];\n          numbers[row][colIndex] = 0;\n          colIndex++;\n          tileGenerated = true;\n        }\n\n        if (\n          colIndex < WIDTH - 1\n          && numbers[row][colIndex + 1] === numbers[row][colIndex]\n        ) {\n          numbers[row][colIndex + 1] += numbers[row][colIndex];\n          numbers[row][colIndex] = 0;\n          score += numbers[row][colIndex + 1];\n\n          tileGenerated = true;\n        }\n      }\n    }\n  }\n\n  if (tileGenerated) {\n    generateRandomTile();\n  }\n\n  return numbers;\n}\n\nfunction slideLeft() {\n  let tileGenerated = false;\n\n  for (let row = 0; row < WIDTH; row++) {\n    for (let col = 1; col < WIDTH; col++) {\n      if (numbers[row][col] !== 0) {\n        let colIndex = col;\n\n        while (colIndex > 0 && numbers[row][colIndex - 1] === 0) {\n          numbers[row][colIndex - 1] = numbers[row][colIndex];\n          numbers[row][colIndex] = 0;\n          colIndex--;\n          tileGenerated = true;\n        }\n\n        if (\n          colIndex > 0\n          && numbers[row][colIndex - 1] === numbers[row][colIndex]\n        ) {\n          numbers[row][colIndex - 1] += numbers[row][colIndex];\n          numbers[row][colIndex] = 0;\n          tileGenerated = true;\n\n          score += numbers[row][colIndex - 1];\n        }\n      }\n    }\n  }\n\n  if (tileGenerated) {\n    generateRandomTile();\n  }\n\n  return numbers;\n}\n\nfunction slideDown() {\n  let tileGenerated = false;\n\n  for (let col = 0; col < WIDTH; col++) {\n    for (let row = WIDTH - 2; row >= 0; row--) {\n      if (numbers[row][col] !== 0) {\n        let rowIndex = row;\n\n        while (rowIndex < WIDTH - 1 && numbers[rowIndex + 1][col] === 0) {\n          numbers[rowIndex + 1][col] = numbers[rowIndex][col];\n          numbers[rowIndex][col] = 0;\n          rowIndex++;\n          tileGenerated = true;\n        }\n\n        if (\n          rowIndex < WIDTH - 1\n          && numbers[rowIndex + 1][col] === numbers[rowIndex][col]\n        ) {\n          numbers[rowIndex + 1][col] += numbers[rowIndex][col];\n          numbers[rowIndex][col] = 0;\n          tileGenerated = true;\n\n          score += numbers[rowIndex + 1][col];\n        }\n      }\n    }\n  }\n\n  if (tileGenerated) {\n    generateRandomTile();\n  }\n\n  return numbers;\n}\n\nfunction slideUp() {\n  let tileGenerated = false;\n\n  for (let col = 0; col < WIDTH; col++) {\n    for (let row = 0; row < WIDTH; row++) {\n      if (numbers[row][col] !== 0) {\n        let rowIndex = row;\n\n        while (rowIndex > 0 && numbers[rowIndex - 1][col] === 0) {\n          numbers[rowIndex - 1][col] = numbers[rowIndex][col];\n          numbers[rowIndex][col] = 0;\n          rowIndex--;\n          tileGenerated = true;\n        }\n\n        if (\n          rowIndex > 0 && numbers[rowIndex - 1][col] === numbers[rowIndex][col]\n        ) {\n          numbers[rowIndex - 1][col] += numbers[rowIndex][col];\n          numbers[rowIndex][col] = 0;\n          tileGenerated = true;\n\n          score += numbers[rowIndex - 1][col];\n        }\n      }\n    }\n  }\n\n  if (tileGenerated) {\n    generateRandomTile();\n  }\n\n  return numbers;\n}\n\nfunction updateBoard() {\n  rows.forEach((row, i) => {\n    const cells = row.querySelectorAll('.field-cell');\n\n    numbers[i].forEach((number, j) => {\n      cells[j].textContent = number !== 0 ? number : '';\n\n      const tileClass = `field-cell--${number}`;\n\n      cells[j].className = `field-cell ${tileClass}`;\n    });\n  });\n\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = score.toString();\n}\n\nfunction handleKeyPress(slide) {\n  if (slide.key === 'ArrowRight') {\n    updateBoard();\n    slideRight(numbers);\n    isAbleToContinue();\n  }\n\n  if (slide.key === 'ArrowLeft') {\n    updateBoard();\n    slideLeft(numbers);\n    isAbleToContinue();\n  }\n\n  if (slide.key === 'ArrowDown') {\n    updateBoard();\n    slideDown(numbers);\n    isAbleToContinue();\n  }\n\n  if (slide.key === 'ArrowUp') {\n    updateBoard();\n    slideUp(numbers);\n    isAbleToContinue();\n  }\n}\n\nlet touchStartX = 0;\nlet touchStartY = 0;\nconst swipeThreshold = 50;\n\nfunction handleTouchStart(slide) {\n  touchStartX = slide.touches[0].clientX;\n  touchStartY = slide.touches[0].clientY;\n}\n\nfunction handleTouchEnd(slide) {\n  const touchEndX = slide.changedTouches[0].clientX;\n  const touchEndY = slide.changedTouches[0].clientY;\n\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  if (Math.abs(deltaX) > swipeThreshold || Math.abs(deltaY) > swipeThreshold) {\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      if (deltaX > 0) {\n        slideRight(numbers);\n      } else {\n        slideLeft(numbers);\n      }\n    } else {\n      if (deltaY > 0) {\n        slideDown(numbers);\n      } else {\n        slideUp(numbers);\n      }\n    }\n\n    updateBoard();\n    isAbleToContinue();\n  }\n}\n\nfunction handleTouchMove(slide) {\n  slide.preventDefault();\n}\n\ndocument.addEventListener('touchmove', handleTouchMove, { passive: false });\n\ndocument.addEventListener('touchstart', handleTouchStart, false);\ndocument.addEventListener('touchend', handleTouchEnd, false);\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nwindow.addEventListener('beforeunload', function(reload) {\n  reload.preventDefault();\n  reload.returnValue = '';\n});\n"]}